
name: build and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}
  ECS_CLUSTER: nginx-cluster          # Add your ECS cluster name
  ECS_SERVICE: nginx-service          # Add your ECS service name
  CONTAINER_NAME: nginx         # Add your container name

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
        
      - name: Aws creds config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: loging to ecr
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
        
      - name: Build tag and push image
        id: build-and-push
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Scan docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
          
      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: Store image in github env
        run: echo "IMAGE_URI=${{ steps.ecr-login.outputs.registry}}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Task Definition and Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ngins-task.json   # Your task definition file
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}
          wait-for-service-stability: true



# name: build and deploy image

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
    
# permissions:
#   id-token: write
#   contents: read

# env:
#   AWS_REGION: us-east-1
#   AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
#   ECR_REPO_NAME: dev
#   IMAGE_TAG: ${{ github.run_number }}

# jobs:
#   Build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: clone repo
#         uses: actions/checkout@v3
        
#       - name: Aws creds config
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE }}
#           aws-region: ${{ env.AWS_REGION }}
          
#       - name: loging to ecr
#         uses: aws-actions/amazon-ecr-login@v1
#         id: ecr-login
        
#       - name: Build tag and push image
#         id: build-and-push
#         run: |
#           docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

#       - name: Scan docker Image for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"  # Scans the built image
#           format: "table"
#           exit-code: "0"
#           severity: "CRITICAL,HIGH"
#       - name: Push image to ecr
#         run: |
#           docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}

#       - name: Store image in github env
#         run: echo "Image=${{ steps.ecr-login.outputs.registry}}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV

#   Deploy:
#     runs-on: ubuntu-latest
#     needs: Build
#     steps:
#         - name: Deploy to ECS
#           uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#           with:
#             task-definition: nginx-task # Path to your ECS definition file
#             service: my-ecs-service  # name of your ecs cluster
#             cluster: ngnix-cluster  # name of your ECS cluster
#             wait-for-service-stability: true
#             image: ${{env.IMAGE_TAG}}
    
